A) Write a program to create a class and implement a default, overloaded and copy 
constructor.
INPUT:
class MyClass
{
 private int a;
 public MyClass()
 {
 System.out.println("Default Constructor");
 }
 public MyClass(int value)
 { 
 a=value;
 System.out.println("Parameterized Constructor and value is :" +a);
 } 
 public MyClass(MyClass other)
 {
 a=other.a;
 System.out.println("Copy Constructor and value is:" +a);
 }
}
public class Pr
{
 public static void main(String[]args)
 { MyClass obj1=new MyClass();
 MyClass obj2=new MyClass(7);
 MyClass obj3=new MyClass(obj2);
 } 
}


B) Write a program to create a class and implement the concept of method 
overloading.
INPUT:
class OperOver
{ 
 public int add(int a, int b)
 { 
 return a+b;
 }
 public int add(int a, int b, int c)
 {
 return a+b+c;
 }
}
public class Pr1b
{
 public static void main(String[]args)
 {
 OperOver obj=new OperOver();
 int sum1=obj.add(5,10);
 int sum2=obj.add(5,10,15);
 System.out.println("Sum of two integers:" +sum1);
 System.out.println("Sum of three integers:"+sum2);
 }
}

C) Write a program to create a class and implement the concepts of static methods.
INPUT:
class DemoStaticMethods
{
 public static int add(int a,int b)
 {
 return a+b;
 }
 public static int subtract(int a,int b)
 {
 return a-b;
 }
}
public class Pr1c
{
 public static void main(String[]args)
 {
 int sum = DemoStaticMethods.add(8,4);
 int difference = DemoStaticMethods.subtract(7,6);
 System.out.println("Sum: "+sum);
 System.out.println("difference: "+difference);
 }
}

2A) Write a program to implement the concepts of Inheritance and method overriding.
INPUT:
class A
{
 void show()
 {
 System.out.println("Base Class");
 }
}
class B extends A
{ 
 void show()
 {
 System.out.println("Dereived Class");
 }
}
class Pr2a
{
 public static void main(String args[])
 {
 B s=new B();
 s.show();
 }
}

B) Write a program to implement the concept of Abstract classes and methods.
INPUT:
abstract class Shape
{
 public abstract double area();
}
class Circle extends Shape
{
 private double radius;
 public Circle(double radius)
 {
 this.radius=radius;
 }
 @Override
 public double area()
 {
 return Math.PI*radius*radius;
 }
}
public class Pr2b
{
 public static void main(String[]args)
 { 
 Circle circle=new Circle(10.0);
 System.out.println("Circle Area:" +circle.area());
 }
}

7A) Write a program for Flow Layout.
INPUT:
import javax.swing.*;
import java.awt.*;
public class DemoFlowLayout{
public static void main(String[] args){
JFrame frame= new JFrame("Flow Layout Example");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(300,200);
JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT));
JButton button1= new JButton("Button 1");
JButton button2= new JButton("Button 2");
JButton button3= new JButton("Button 3");
panel.add(button1);
panel.add(button2);
panel.add(button3);
frame.add(panel);
frame.setVisible(true);
}
}

B) Write a program for Grid Layout.
INPUT:
import javax.swing.*;
import java.awt.*;
public class DemoGridLayout{
public static void main(String[] args){
JFrame frame= new JFrame("Grid Layout Example");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(300,200);
JPanel panel=new JPanel(new GridLayout(2,3));
JButton button1= new JButton("Button 1");
JButton button2= new JButton("Button 2");
JButton button3= new JButton("Button 3");
JButton button4= new JButton("Button 4");
JButton button5= new JButton("Button 5");
JButton button6= new JButton("Button 6");
panel.add(button1);
panel.add(button2);
panel.add(button3);
panel.add(button4);
panel.add(button5);
panel.add(button6);
frame.add(panel);
frame.setVisible(true);
}
}

C) Write a program for Border Layout.
INPUT:
import javax.swing.*;
import java.awt.*;
public class DemoBorderLayout{
public static void main(String[] args){
JFrame frame= new JFrame("BorderLayout Example");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(300,200);
JButton northButton= new JButton("Button North");
JButton southButton= new JButton("Button South");
JButton eastButton= new JButton("Button East");
JButton westButton= new JButton("Button West");
JButton centerButton= new JButton("Button Center");
Container contentPane = frame.getContentPane();
contentPane.setLayout(new BorderLayout());
contentPane.add(northButton,BorderLayout.NORTH);
contentPane.add(southButton,BorderLayout.SOUTH);
contentPane.add(eastButton,BorderLayout.EAST);
contentPane.add(westButton,BorderLayout.WEST);
contentPane.add(centerButton,BorderLayout.CENTER);
frame.setVisible(true);
}
}

8A) Write a program to demonstrate Action Event with Button Click.
INPUT:
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
public class ButtonClkDemo {
 public static void main(String[] args) {
 JFrame frame = new JFrame("Button Click Demo");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 JButton button = new JButton("Click Me");
 button.addActionListener(new ActionListener() {
 @Override
 public void actionPerformed(ActionEvent e) { 
JOptionPane.showMessageDialog(null, "Button Clicked!");
 }
 });
 frame.getContentPane().add(button);
 frame.pack(); 
 frame.setVisible(true);
 }
}

B) Write a program to demonstrate Action Event with Menu Click.
INPUT:
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
public class MenuItmClk {
 public static void main(String[] args) {
 JFrame frame = new JFrame("Menu Item Click Demo");
 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 JMenuBar menuBar = new JMenuBar();
 JMenu fileMenu = new JMenu("File");
 JMenuItem openItem = new JMenuItem("Open");
 openItem.addActionListener(new ActionListener() {
 @Override
 public void actionPerformed(ActionEvent e) {
 JOptionPane.showMessageDialog(frame,"File-> Open clicked!");
 }
 });
 fileMenu.add(openItem);
 menuBar.add(fileMenu);
 frame.setJMenuBar(menuBar);
 frame.setSize(400,300);
 frame.setVisible(true);
 }
}

C) Write a program to demonstrate Action Event with Text Field Enter Key Event.
INPUT:
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
public class TxtEnterKey{
public static void main(String[] args){
JFrame frame=new JFrame("Text Field Enter Key Event");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
JTextField textField=new JTextField(20);
textField.addActionListener(new ActionListener(){
@Override
public void actionPerformed(ActionEvent e){
JOptionPane.showMessageDialog(frame,"Enter key pressed in text field");
}
});
frame.getContentPane().add(textField); 
frame.pack(); 
frame.setVisible(true);
}
}

5A) Write a JDBC program that displays the data of a given table in a GUI Table.
CREATING THE DATABASE:
INPUT:
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class Pr5a extends JFrame
{
private JTable table;
private DefaultTableModel model;
public Pr5a()
{
setTitle("Database Table Display");
setSize(300,200);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
model = new DefaultTableModel();
table = new JTable(model);
JScrollPane scrollPane = new JScrollPane(table);
add(scrollPane, BorderLayout.CENTER);
try
{
Connection connection = 
DriverManager.getConnection("jdbc:mysql://localhost/userDetails","root","it");
Statement statement = connection.createStatement();
String query = "SELECT * FROM myuser1";
ResultSet resultSet = statement.executeQuery(query);
int columnCount = resultSet.getMetaData().getColumnCount();
for(int i=1; i<=columnCount; i++){
model.addColumn(resultSet.getMetaData().getColumnName(i));
}
while(resultSet.next())
{
Object[] row = new Object[columnCount];
for(int i=1; i<=columnCount; i++)
{
row[i-1] = resultSet.getObject(i);
}
model.addRow(row);
}
resultSet.close();
statement.close();
connection.close();
}
catch(SQLException e)
{
e.printStackTrace();
}
}
public static void main(String[] args)
{
SwingUtilities.invokeLater(()->
{
Pr5a app = new Pr5a();
app.setVisible(true);
});
}
}
